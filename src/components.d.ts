/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/router';

import { McfModalController as McfModalController } from './components/mcf-modal-controller/mcf-modal-controller';

interface HTMLMcfModalControllerElement extends McfModalController, HTMLElement {
}
declare var HTMLMcfModalControllerElement: {
  prototype: HTMLMcfModalControllerElement;
  new (): HTMLMcfModalControllerElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "mcf-modal-controller": HTMLMcfModalControllerElement;
  }
  interface ElementTagNameMap {
      "mcf-modal-controller": HTMLMcfModalControllerElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "mcf-modal-controller": JSXElements.McfModalControllerAttributes;
      }
  }
  namespace JSXElements {
      export interface McfModalControllerAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          create?: any
      }
  }
}

import { McfModal as McfModal } from './components/mcf-modal/mcf-modal';

interface HTMLMcfModalElement extends McfModal, HTMLElement {
}
declare var HTMLMcfModalElement: {
  prototype: HTMLMcfModalElement;
  new (): HTMLMcfModalElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "mcf-modal": HTMLMcfModalElement;
  }
  interface ElementTagNameMap {
      "mcf-modal": HTMLMcfModalElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "mcf-modal": JSXElements.McfModalAttributes;
      }
  }
  namespace JSXElements {
      export interface McfModalAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          present?: any,
          dismiss?: any,
          getElement?: any,
          component?: string,
          componentProps?: any,
          cssClass?: string,
          enableBackdropDismiss?: boolean,
          enterAnimation?: boolean,
          exitAnimation?: boolean,
          modalId?: string,
          showBackdrop?: boolean,
          showCloseIcon?: boolean
      }
  }
}

import { ModalUserData as ModalUserData } from './components/modal-user-data/modal-user-data';

interface HTMLModalUserDataElement extends ModalUserData, HTMLElement {
}
declare var HTMLModalUserDataElement: {
  prototype: HTMLModalUserDataElement;
  new (): HTMLModalUserDataElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "modal-user-data": HTMLModalUserDataElement;
  }
  interface ElementTagNameMap {
      "modal-user-data": HTMLModalUserDataElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "modal-user-data": JSXElements.ModalUserDataAttributes;
      }
  }
  namespace JSXElements {
      export interface ModalUserDataAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          userId?: number
      }
  }
}

import { MyEmbeddedComponent as MyEmbeddedComponent } from './components/my-embedded-component/my-embedded-component';

interface HTMLMyEmbeddedComponentElement extends MyEmbeddedComponent, HTMLElement {
}
declare var HTMLMyEmbeddedComponentElement: {
  prototype: HTMLMyEmbeddedComponentElement;
  new (): HTMLMyEmbeddedComponentElement;
};
declare global {
  interface HTMLElementTagNameMap {
      "my-embedded-component": HTMLMyEmbeddedComponentElement;
  }
  interface ElementTagNameMap {
      "my-embedded-component": HTMLMyEmbeddedComponentElement;
  }
  namespace JSX {
      interface IntrinsicElements {
          "my-embedded-component": JSXElements.MyEmbeddedComponentAttributes;
      }
  }
  namespace JSXElements {
      export interface MyEmbeddedComponentAttributes extends HTMLAttributes {
          mode?: string,
          color?: string,
        
          modalClass?: string,
          modalId?: string,
          componentName?: string,
          componentProps?: any
      }
  }
}

