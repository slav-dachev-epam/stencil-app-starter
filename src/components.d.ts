/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/router';


import {
  McfModalController as McfModalController
} from './components/mcf-modal-controller/mcf-modal-controller';

declare global {
  interface HTMLMcfModalControllerElement extends McfModalController, HTMLElement {
  }
  var HTMLMcfModalControllerElement: {
    prototype: HTMLMcfModalControllerElement;
    new (): HTMLMcfModalControllerElement;
  };
  interface HTMLElementTagNameMap {
    "mcf-modal-controller": HTMLMcfModalControllerElement;
  }
  interface ElementTagNameMap {
    "mcf-modal-controller": HTMLMcfModalControllerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "mcf-modal-controller": JSXElements.McfModalControllerAttributes;
    }
  }
  namespace JSXElements {
    export interface McfModalControllerAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  McfModal as McfModal
} from './components/mcf-modal/mcf-modal';

declare global {
  interface HTMLMcfModalElement extends McfModal, HTMLElement {
  }
  var HTMLMcfModalElement: {
    prototype: HTMLMcfModalElement;
    new (): HTMLMcfModalElement;
  };
  interface HTMLElementTagNameMap {
    "mcf-modal": HTMLMcfModalElement;
  }
  interface ElementTagNameMap {
    "mcf-modal": HTMLMcfModalElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "mcf-modal": JSXElements.McfModalAttributes;
    }
  }
  namespace JSXElements {
    export interface McfModalAttributes extends HTMLAttributes {
      
        component?: string,
        componentProps?: any,
        enableBackdropDismiss?: boolean,
        enterAnimation?: boolean,
        exitAnimation?: boolean,
        modalId?: string,
        showBackdrop?: boolean,
        showCloseIcon?: boolean,
        cssClass?: string
    }
  }
}


import {
  ModalUserData as ModalUserData
} from './components/modal-user-data/modal-user-data';

declare global {
  interface HTMLModalUserDataElement extends ModalUserData, HTMLElement {
  }
  var HTMLModalUserDataElement: {
    prototype: HTMLModalUserDataElement;
    new (): HTMLModalUserDataElement;
  };
  interface HTMLElementTagNameMap {
    "modal-user-data": HTMLModalUserDataElement;
  }
  interface ElementTagNameMap {
    "modal-user-data": HTMLModalUserDataElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "modal-user-data": JSXElements.ModalUserDataAttributes;
    }
  }
  namespace JSXElements {
    export interface ModalUserDataAttributes extends HTMLAttributes {
      
        userId?: number
    }
  }
}


import {
  MyEmbeddedComponent as MyEmbeddedComponent
} from './components/my-embedded-component/my-embedded-component';

declare global {
  interface HTMLMyEmbeddedComponentElement extends MyEmbeddedComponent, HTMLElement {
  }
  var HTMLMyEmbeddedComponentElement: {
    prototype: HTMLMyEmbeddedComponentElement;
    new (): HTMLMyEmbeddedComponentElement;
  };
  interface HTMLElementTagNameMap {
    "my-embedded-component": HTMLMyEmbeddedComponentElement;
  }
  interface ElementTagNameMap {
    "my-embedded-component": HTMLMyEmbeddedComponentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "my-embedded-component": JSXElements.MyEmbeddedComponentAttributes;
    }
  }
  namespace JSXElements {
    export interface MyEmbeddedComponentAttributes extends HTMLAttributes {
      
        modalClass?: string,
        modalId?: string,
        componentName?: string,
        componentProps?: any
    }
  }
}

